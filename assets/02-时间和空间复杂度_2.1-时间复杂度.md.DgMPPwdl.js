import{_ as t,c as e,o as a,a1 as _}from"./chunks/framework.B4u6hNpB.js";const i="/algorithm-js-youtube/assets/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6.gKQfD9fl.png",f=JSON.parse('{"title":"时间复杂度","description":"","frontmatter":{},"headers":[],"relativePath":"02-时间和空间复杂度/2.1-时间复杂度.md","filePath":"02-时间和空间复杂度/2.1-时间复杂度.md"}'),l={name:"02-时间和空间复杂度/2.1-时间复杂度.md"},o=_('<h1 id="时间复杂度" tabindex="-1">时间复杂度 <a class="header-anchor" href="#时间复杂度" aria-label="Permalink to &quot;时间复杂度&quot;">​</a></h1><p>用来定性描述该算法的运行时间, 用大O表示,比如O(1)、O(n)、O(n)、O(log n),重点关注一下几种类型:</p><p><img src="'+i+'" alt="时间复杂度"></p><ul><li>O(1)：常数时间复杂度，算法的运行时间与数据规模无关，比如打印输出语句。</li><li>O(log n)：对数时间复杂度，算法的运行时间与数据规模的对数成正比，比如二分查找。</li><li>O(n)：线性时间复杂度，算法的运行时间与数据规模成正比，比如简单排序算法。</li><li>O(n^2)：平方时间复杂度，算法的运行时间与数据规模的平方成正比，比如简单选择排序算法「两层遍历」。</li><li>O(n^3)：立方时间复杂度，算法的运行时间与数据规模的立方成正比，比如矩阵乘法。</li><li>O(2^n)：指数时间复杂度，算法的运行时间与数据规模的指数成正比，比如递归算法。</li></ul>',4),n=[o];function s(r,c,p,d,m,h){return a(),e("div",null,n)}const u=t(l,[["render",s]]);export{f as __pageData,u as default};

import{_ as s,c as i,o as a,a1 as n}from"./chunks/framework.B4u6hNpB.js";const l="/algorithm-js-youtube/assets/%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97.R5r4SghG.webp",p="/algorithm-js-youtube/assets/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF.CxTsdUSW.webp",F=JSON.parse('{"title":"事件循环","description":"","frontmatter":{},"headers":[],"relativePath":"04-队列/4.4-异步中的任务队列/index.md","filePath":"04-队列/4.4-异步中的任务队列/index.md"}'),t={name:"04-队列/4.4-异步中的任务队列/index.md"},e=n(`<h1 id="事件循环" tabindex="-1">事件循环 <a class="header-anchor" href="#事件循环" aria-label="Permalink to &quot;事件循环&quot;">​</a></h1><p>先看一道面试题</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 事件循环面试题</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;timer_1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;timer_3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;new promise&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;promise then&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;timer_2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;结束&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 打印结果顺序：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 结束</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * timer_1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * new promise</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * promise then</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * timer_2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * timer_3</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span></code></pre></div><h2 id="任务队列" tabindex="-1">任务队列 <a class="header-anchor" href="#任务队列" aria-label="Permalink to &quot;任务队列&quot;">​</a></h2><p>JavaScript 引擎的运行机制是事件循环（event loop）。事件循环是一种单线程模型，它只执行一个任务，然后切换到另一个任务，如此反复，直到没有任务需要执行。</p><p>JavaScript 引擎的任务队列是一个先进先出（FIFO）的数据结构，里面存放着各种需要执行的任务。每当 JavaScript 引擎执行一个任务，就会从任务队列中取出最前面的一个任务，并执行它。</p><p><img src="`+l+'" alt="队列的应用"></p><h2 id="异步任务" tabindex="-1">异步任务 <a class="header-anchor" href="#异步任务" aria-label="Permalink to &quot;异步任务&quot;">​</a></h2><p>JavaScript 引擎的任务队列可以处理两种类型的任务：同步任务和异步任务。</p><ul><li><p><strong>同步任务</strong>是指在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务。</p></li><li><p><strong>异步任务</strong>是指不在主线程上执行的任务，它会在任务队列中排队，等待主线程空闲时执行。</p></li></ul><p>异步任务有两种类型：微任务（microtask）和宏任务（macrotask）。</p><ul><li><p><strong>微任务</strong>是指 promise、process.nextTick()、Object.observe()、MutationObserver 等。</p></li><li><p><strong>宏任务</strong>是指 setTimeout、setInterval、setImmediate、I/O、UI rendering 等。</p></li></ul><h2 id="事件循环的顺序" tabindex="-1">事件循环的顺序 <a class="header-anchor" href="#事件循环的顺序" aria-label="Permalink to &quot;事件循环的顺序&quot;">​</a></h2><p>事件循环的顺序是： 同步任务 -&gt; 微任务 -&gt; 宏任务 -&gt; 异步任务 -&gt; 微任务 -&gt; 宏任务 -&gt; ...</p><ol><li><p>首先执行同步任务，这类任务包括各种函数调用、变量赋值、条件判断等。</p></li><li><p>执行栈为空，查询是否有微任务需要执行。</p></li><li><p>如果有微任务需要执行，则将它添加到微任务队列。</p></li><li><p>然后执行微任务队列中的所有微任务。</p></li><li><p>微任务执行完毕，再次查询是否有微任务需要执行。</p></li><li><p>如果有微任务需要执行，则将它添加到微任务队列。</p></li><li><p>然后执行宏任务队列中的所有宏任务。</p></li><li><p>宏任务执行完毕，再次查询是否有微任务需要执行。</p></li><li><p>如果有微任务需要执行，则将它添加到微任务队列。</p></li><li><p>重复步骤 7-9，直到微任务队列和宏任务队列都为空。</p></li><li><p>如果有异步任务需要执行，则将它添加到任务队列。</p></li><li><p>然后开始下一轮事件循环，直到所有任务都执行完毕。</p></li></ol><p><img src="'+p+'" alt="事件循环的顺序"></p><h2 id="队列的应用" tabindex="-1">队列的应用 <a class="header-anchor" href="#队列的应用" aria-label="Permalink to &quot;队列的应用&quot;">​</a></h2><p>JavaScript 引擎的任务队列可以应用于很多方面，比如：</p><ol><li><p>异步加载脚本：JavaScript 引擎可以将脚本的加载任务放入任务队列，这样可以让浏览器逐步渲染页面，提高用户体验。</p></li><li><p>定时器：JavaScript 引擎可以将定时器的回调函数放入任务队列，这样可以让定时器不影响页面的渲染。</p></li><li><p>事件绑定：JavaScript 引擎可以将事件的回调函数放入任务队列，这样可以让事件的响应不影响页面的渲染。</p></li><li><p>异步操作：JavaScript 引擎可以将异步操作的回调函数放入任务队列，这样可以让异步操作不影响页面的渲染。</p></li><li><p>微任务：JavaScript 引擎可以将微任务（promise、process.nextTick()、Object.observe()、MutationObserver 等）的回调函数放入微任务队列，这样可以让微任务不影响页面的渲染。</p></li><li><p>宏任务：JavaScript 引擎可以将宏任务（setTimeout、setInterval、setImmediate、I/O、UI rendering 等）的回调函数放入宏任务队列，这样可以让宏任务不影响页面的渲染。</p></li><li><p>任务优先级：JavaScript 引擎可以设置任务的优先级，比如可以让某些任务优先于其他任务执行。</p></li><li><p>任务取消：JavaScript 引擎可以取消某些任务，比如可以取消 setTimeout 定时器。</p></li><li><p>任务暂停：JavaScript 引擎可以暂停某些任务，比如可以暂停 setInterval 定时器。</p></li><li><p>任务超时：JavaScript 引擎可以设置任务的超时时间，比如可以设置 setTimeout 定时器的超时时间。</p></li></ol><p>总之，JavaScript 引擎的任务队列可以帮助我们实现各种异步操作，提高页面的渲染效率。</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://github.com/Jacky-Summer/personal-blog/blob/master/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JavaScript%E7%B3%BB%E5%88%97/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%20JavaScript%20%E4%B9%8B%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF(Event%20Loop).md" target="_blank" rel="noreferrer">深入理解 JavaScript 之事件循环(Event Loop)</a></li><li><a href="https://segmentfault.com/a/1190000022805523#item-7" target="_blank" rel="noreferrer">JavaScript中的Event Loop（事件循环）机制</a></li><li><a href="https://zhuanlan.zhihu.com/p/580956436" target="_blank" rel="noreferrer">面试必问之 JS 事件循环(Event Loop)，看这一篇足够</a></li></ul>',22),h=[e];function k(r,E,o,d,g,c){return a(),i("div",null,h)}const m=s(t,[["render",k]]);export{F as __pageData,m as default};
